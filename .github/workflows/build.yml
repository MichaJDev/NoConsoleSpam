name: NoConsoleSpam Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build-and-release:
    name: Build, Test and Release
    runs-on: ubuntu-latest
    
    steps:
      # Manual checkout instead of using actions/checkout
      - name: Manual repository checkout
        run: |
          echo "Performing manual checkout"
          # Create working directory
          mkdir -p workspace
          cd workspace
          
          # Initialize git
          git init
          git remote add origin https://github.com/${{ github.repository }}.git
          
          if [[ "${{ github.ref }}" == refs/pull/* ]]; then
            # For pull requests
            git fetch origin ${{ github.ref }} --depth=1
            git checkout FETCH_HEAD
          else
            # For branches and tags
            git fetch origin ${{ github.ref }} --depth=1
            git checkout FETCH_HEAD
          fi
          
          # Set the workspace directory
          echo "WORKSPACE=$(pwd)" >> $GITHUB_ENV
          ls -la
      
      # Manual JDK setup instead of using actions/setup-java
      - name: Setup JDK 17
        run: |
          echo "Setting up JDK 17"
          # Install JDK if needed
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export PATH=$JAVA_HOME/bin:$PATH
          
          # Add to GitHub ENV for other steps
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "PATH=$PATH" >> $GITHUB_ENV
          
          # Verify Java installation
          java -version
          javac -version
          
      - name: Build with Maven
        run: |
          cd $WORKSPACE
          echo "Building project with Maven"
          mvn -B clean package
          
      - name: Extract version from pom.xml
        id: version
        run: |
          cd $WORKSPACE
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"
          
      - name: Run tests
        run: |
          cd $WORKSPACE
          echo "Running tests"
          mvn -B test
      
      - name: Prepare artifact directory
        run: |
          cd $WORKSPACE
          echo "Preparing artifact directory"
          mkdir -p artifacts
          ARTIFACT_NAME="noconsolespam-$VERSION.jar"
          cp target/$ARTIFACT_NAME artifacts/
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "Prepared artifact: $ARTIFACT_NAME"
          ls -la artifacts/
      
      # Create release if it's a tag
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cd $WORKSPACE
          echo "Creating GitHub release for version $VERSION"
          
          # Install GitHub CLI
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          sudo apt-add-repository https://cli.github.com/packages
          sudo apt update
          sudo apt install -y gh
          
          # Authenticate with GitHub CLI
          echo "${{ github.token }}" | gh auth login --with-token
          
          # Create a release
          ARTIFACT_PATH="artifacts/$ARTIFACT_NAME"
          
          # Create release notes
          cat > release_notes.md << EOF
          ## NoConsoleSpam $VERSION Release
          
          ### Installation
          1. Install [Fabric Loader](https://fabricmc.net/use/) for Minecraft 1.20.1
          2. Download the JAR file
          3. Place it in your Minecraft mods folder
          
          For more details, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md)
          EOF
          
          # Create the release
          gh release create "v$VERSION" \
            --title "NoConsoleSpam $VERSION" \
            --notes-file release_notes.md \
            "$ARTIFACT_PATH"
      
      # Update VERSIONS.md if it's a tag
      - name: Update VERSIONS Documentation
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cd $WORKSPACE
          echo "Updating VERSIONS.md for $VERSION"
          
          # Get current date
          DATE=$(date +"%Y-%m-%d")
          
          # Prepare new version entry
          NEW_ENTRY="## [$VERSION](https://github.com/${{ github.repository }}/releases/tag/v$VERSION) - $DATE\n\n- [Download JAR](https://github.com/${{ github.repository }}/releases/download/v$VERSION/noconsolespam-$VERSION.jar)\n- [View Changes](https://github.com/${{ github.repository }}/blob/main/CHANGES.md#$(echo $VERSION | sed 's/\\./-/g'))\n"
          
          # If VERSIONS.md doesn't exist, create it
          if [ ! -f VERSIONS.md ]; then
            echo "# NoConsoleSpam Versions\n\nThis document provides links to all released versions of NoConsoleSpam.\n" > VERSIONS.md
          fi
          
          # Add new entry after header
          awk -v new_entry="$NEW_ENTRY" 'NR==4{print new_entry}1' VERSIONS.md > VERSIONS.md.tmp && mv VERSIONS.md.tmp VERSIONS.md
          
          # Configure Git for commit
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Commit the changes
          git add VERSIONS.md
          git commit -m "Update VERSIONS.md for $VERSION" || echo "No changes to commit"
          
          # Push using token authentication
          git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git
          git push origin HEAD:${GITHUB_REF#refs/heads/}
          
      # Upload artifacts as workflow artifacts for debugging
      - name: Save artifacts for download
        if: always()
        run: |
          cd $WORKSPACE
          echo "Saving artifacts for download"
          
          # Create archive of artifacts
          tar -czvf noconsolespam-build.tar.gz artifacts/
          
          # Move to a predictable location that GitHub actions can access
          mkdir -p /tmp/artifacts
          cp noconsolespam-build.tar.gz /tmp/artifacts/
          
          echo "Artifacts saved to /tmp/artifacts/noconsolespam-build.tar.gz"
          
          # Output artifact location for GitHub to find
          echo "ARTIFACT_PATH=/tmp/artifacts/noconsolespam-build.tar.gz" >> $GITHUB_ENV 