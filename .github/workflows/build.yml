name: NoConsoleSpam Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  CACHE_DIR: /tmp/build-cache
  ARTIFACT_DIR: /tmp/build-artifacts
  RELEASE_DIR: /tmp/release-artifacts
  REPO_DIR: /tmp/repository

jobs:
  setup:
    name: Repository Setup
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Create workspace directories
        run: |
          echo "Creating workspace and cache directories"
          mkdir -p ${{ env.CACHE_DIR }}
          mkdir -p ${{ env.ARTIFACT_DIR }}
          mkdir -p ${{ env.RELEASE_DIR }}
          rm -rf ${{ env.REPO_DIR }} || true
          mkdir -p ${{ env.REPO_DIR }}
      
      - name: Manual repository checkout
        run: |
          echo "Performing manual checkout"
          cd ${{ env.REPO_DIR }}
          git clone https://github.com/${{ github.repository }}.git ./repo
          cd repo
          
          if [[ "${{ github.ref }}" == refs/pull/* ]]; then
            # For pull requests
            git fetch origin ${{ github.ref }} --depth=1
            git checkout FETCH_HEAD
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # For tags
            git fetch --depth=1 origin +${{ github.ref }}:${{ github.ref }}
            git checkout ${{ github.ref }}
          else
            # For branches
            git checkout ${{ github.ref_name }}
          fi
          
          echo "Repository checkout complete"
          ls -la
      
      - name: Setup JDK 17
        run: |
          echo "Setting up JDK 17"
          java -version || {
            echo "Java not found, installing OpenJDK 17"
            sudo apt-get update
            sudo apt-get install -y openjdk-17-jdk
          }
          
          export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))
          echo "JAVA_HOME=$JAVA_HOME"
          echo "PATH=$PATH:$JAVA_HOME/bin" >> $GITHUB_ENV
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          
          # Verify installation
          java -version
          javac -version
      
      - name: Extract version from pom.xml
        id: extract_version
        run: |
          cd ${{ env.REPO_DIR }}/repo
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
          
          # Save version to a file for other jobs
          echo "$VERSION" > ${{ env.CACHE_DIR }}/version.txt
      
      - name: Cache Maven dependencies
        run: |
          echo "Setting up Maven cache"
          # Check if Maven cache exists
          if [ -d ~/.m2 ]; then
            echo "Maven cache directory exists"
          else
            echo "Creating Maven cache directory"
            mkdir -p ~/.m2
          fi
          
          # Copy Maven settings to cache locations
          cd ${{ env.REPO_DIR }}/repo
          if [ -f pom.xml ]; then
            echo "Found pom.xml, copying to cache"
            cp pom.xml ${{ env.CACHE_DIR }}/pom.xml
          else
            echo "Warning: pom.xml not found"
          fi

  build:
    name: Build Project
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Create workspace directories
        run: |
          echo "Creating build workspace directories"
          mkdir -p ${{ env.CACHE_DIR }}
          mkdir -p ${{ env.ARTIFACT_DIR }}
          rm -rf ${{ env.REPO_DIR }}_build || true
          mkdir -p ${{ env.REPO_DIR }}_build
      
      - name: Manual repository checkout
        run: |
          echo "Performing manual checkout for build job"
          cd ${{ env.REPO_DIR }}_build
          git clone https://github.com/${{ github.repository }}.git ./repo
          cd repo
          
          if [[ "${{ github.ref }}" == refs/pull/* ]]; then
            git fetch origin ${{ github.ref }} --depth=1
            git checkout FETCH_HEAD
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            git fetch --depth=1 origin +${{ github.ref }}:${{ github.ref }}
            git checkout ${{ github.ref }}
          else
            git checkout ${{ github.ref_name }}
          fi
          
          echo "Repository contents:"
          ls -la
      
      - name: Setup JDK 17
        run: |
          echo "Setting up JDK 17 for build job"
          java -version || {
            echo "Java not found, installing OpenJDK 17"
            sudo apt-get update
            sudo apt-get install -y openjdk-17-jdk
          }
          
          export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "PATH=$PATH:$JAVA_HOME/bin" >> $GITHUB_ENV
      
      - name: Restore Maven cache
        run: |
          echo "Restoring Maven cache"
          mkdir -p ${{ env.CACHE_DIR }}
          
          # Use Maven cache if available
          if [ -d ~/.m2 ]; then
            echo "Maven cache directory exists"
          else
            echo "Creating Maven cache directory"
            mkdir -p ~/.m2
          fi
      
      - name: Build with Maven
        run: |
          cd ${{ env.REPO_DIR }}_build/repo
          echo "Building project with Maven"
          mvn -B clean package
          
          # Verify build success
          if [ ! -d "target" ]; then
            echo "Error: Build failed - target directory not found"
            exit 1
          fi
          
          echo "Build directory contents:"
          ls -la target/
          
          # Create artifact directory and copy build artifacts
          mkdir -p ${{ env.ARTIFACT_DIR }}/target
          cp -r target/* ${{ env.ARTIFACT_DIR }}/target/
          
          echo "Copied build artifacts to shared location"
          ls -la ${{ env.ARTIFACT_DIR }}/target/
      
      - name: Extract version from pom.xml
        id: extract_version
        run: |
          cd ${{ env.REPO_DIR }}_build/repo
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
          
          # Save version to a file for other jobs
          mkdir -p ${{ env.CACHE_DIR }}
          echo "$VERSION" > ${{ env.CACHE_DIR }}/version.txt

  test:
    name: Run Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create workspace directories
        run: |
          echo "Creating test workspace directories"
          mkdir -p ${{ env.CACHE_DIR }}
          rm -rf ${{ env.REPO_DIR }}_test || true
          mkdir -p ${{ env.REPO_DIR }}_test
      
      - name: Manual repository checkout
        run: |
          echo "Performing manual checkout for test job"
          cd ${{ env.REPO_DIR }}_test
          git clone https://github.com/${{ github.repository }}.git ./repo
          cd repo
          
          if [[ "${{ github.ref }}" == refs/pull/* ]]; then
            git fetch origin ${{ github.ref }} --depth=1
            git checkout FETCH_HEAD
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            git fetch --depth=1 origin +${{ github.ref }}:${{ github.ref }}
            git checkout ${{ github.ref }}
          else
            git checkout ${{ github.ref_name }}
          fi
      
      - name: Setup JDK 17
        run: |
          echo "Setting up JDK 17 for test job"
          java -version || {
            echo "Java not found, installing OpenJDK 17"
            sudo apt-get update
            sudo apt-get install -y openjdk-17-jdk
          }
          
          export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "PATH=$PATH:$JAVA_HOME/bin" >> $GITHUB_ENV
      
      - name: Restore Maven cache
        run: |
          echo "Restoring Maven cache for tests"
          # Use Maven cache if available
          if [ -d ~/.m2 ]; then
            echo "Maven cache directory exists"
          else
            echo "Creating Maven cache directory"
            mkdir -p ~/.m2
          fi
      
      - name: Run tests
        run: |
          cd ${{ env.REPO_DIR }}_test/repo
          echo "Running tests"
          mvn -B test

  prepare-artifacts:
    name: Prepare Release Artifacts
    needs: [build, test]
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.prepare_artifacts.outputs.artifact_name }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version information
        id: get_version
        run: |
          mkdir -p ${{ env.CACHE_DIR }}
          if [ -f "${{ env.CACHE_DIR }}/version.txt" ]; then
            VERSION=$(cat ${{ env.CACHE_DIR }}/version.txt)
          else
            # Generate a timestamp for unique directory
            TIMESTAMP=$(date +%s)
            CHECKOUT_DIR="/tmp/repo_checkout_${TIMESTAMP}"
            
            echo "Version file not found, checking out repository to $CHECKOUT_DIR"
            mkdir -p "$CHECKOUT_DIR"
            cd "$CHECKOUT_DIR"
            
            # Clone the repository to this unique directory
            git clone https://github.com/${{ github.repository }}.git .
            
            # Extract version
            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            echo "$VERSION" > ${{ env.CACHE_DIR }}/version.txt
            
            # Clean up
            cd /tmp
            rm -rf "$CHECKOUT_DIR"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
      
      - name: Prepare release artifacts
        id: prepare_artifacts
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "Preparing release artifacts for version $VERSION"
          
          # Create artifacts directory
          mkdir -p ${{ env.RELEASE_DIR }}
          
          # Copy build artifacts if needed
          if [ ! -d "${{ env.ARTIFACT_DIR }}/target" ]; then
            echo "ERROR: Build artifacts not found, rebuilding from scratch"
            
            # Generate a timestamp for unique directory
            TIMESTAMP=$(date +%s)
            REBUILD_DIR="/tmp/rebuild_${TIMESTAMP}"
            
            echo "Creating unique rebuild directory at $REBUILD_DIR"
            mkdir -p "$REBUILD_DIR"
            cd "$REBUILD_DIR"
            
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git .
            
            if [[ "${{ github.ref }}" == refs/pull/* ]]; then
              git fetch origin ${{ github.ref }} --depth=1
              git checkout FETCH_HEAD
            elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
              git fetch --depth=1 origin +${{ github.ref }}:${{ github.ref }}
              git checkout ${{ github.ref }}
            else
              git checkout ${{ github.ref_name }}
            fi
            
            # Setup JDK
            java -version || {
              sudo apt-get update
              sudo apt-get install -y openjdk-17-jdk
            }
            
            # Build
            echo "Building project in $REBUILD_DIR"
            mvn -B clean package
            
            # Create artifact directory and copy build artifacts
            mkdir -p ${{ env.ARTIFACT_DIR }}/target
            cp -r target/* ${{ env.ARTIFACT_DIR }}/target/
            
            # Clean up rebuild directory
            cd /tmp
            rm -rf "$REBUILD_DIR"
            
            echo "Rebuild complete, artifacts copied to ${{ env.ARTIFACT_DIR }}/target/"
          fi
          
          # Find exact JAR file
          ARTIFACT_NAME="noconsolespam-$VERSION.jar"
          SOURCE_PATH="${{ env.ARTIFACT_DIR }}/target/$ARTIFACT_NAME"
          
          if [ ! -f "$SOURCE_PATH" ]; then
            echo "ERROR: JAR file not found at expected path: $SOURCE_PATH"
            echo "Contents of target directory:"
            ls -la ${{ env.ARTIFACT_DIR }}/target/
            exit 1
          fi
          
          # Copy JAR to release directory with verbose output
          echo "Copying $SOURCE_PATH to ${{ env.RELEASE_DIR }}/$ARTIFACT_NAME"
          cp -v "$SOURCE_PATH" "${{ env.RELEASE_DIR }}/$ARTIFACT_NAME"
          
          echo "Release directory contents:"
          ls -la ${{ env.RELEASE_DIR }}/
          
          # Create artifact archive
          echo "Creating artifact archive"
          tar -czvf ${{ env.RELEASE_DIR }}/noconsolespam-build.tar.gz -C ${{ env.RELEASE_DIR }} $ARTIFACT_NAME
          
          # Save artifact name for later reference
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

  create-release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: prepare-artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Get version information
        run: |
          # Extract version from tag
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version from tag: $VERSION"
      
      - name: Setup release environment
        run: |
          echo "Setting up release environment"
          
          # Install GitHub CLI
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
          
          # Authenticate with GitHub CLI
          echo "${{ github.token }}" | gh auth login --with-token
      
      - name: Verify release artifact
        run: |
          ARTIFACT_NAME="noconsolespam-$VERSION.jar"
          ARTIFACT_PATH="${{ env.RELEASE_DIR }}/$ARTIFACT_NAME"
          
          # Check if artifact exists
          if [ ! -f "$ARTIFACT_PATH" ]; then
            echo "ERROR: Release artifact not found, rebuilding from scratch"
            
            # Generate a timestamp for unique directory
            TIMESTAMP=$(date +%s)
            RELEASE_REBUILD_DIR="/tmp/release_rebuild_${TIMESTAMP}"
            
            mkdir -p ${{ env.RELEASE_DIR }}
            mkdir -p "$RELEASE_REBUILD_DIR"
            cd "$RELEASE_REBUILD_DIR"
            
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git .
            
            if [[ "${{ github.ref }}" == refs/tags/* ]]; then
              git fetch --depth=1 origin +${{ github.ref }}:${{ github.ref }}
              git checkout ${{ github.ref }}
            fi
            
            # Setup JDK
            java -version || {
              sudo apt-get update
              sudo apt-get install -y openjdk-17-jdk
            }
            
            # Build
            echo "Building release in $RELEASE_REBUILD_DIR"
            mvn -B clean package
            
            # Copy to release directory
            cp -v "target/$ARTIFACT_NAME" "${{ env.RELEASE_DIR }}/$ARTIFACT_NAME"
            
            # Clean up 
            cd /tmp
            rm -rf "$RELEASE_REBUILD_DIR"
          fi
          
          echo "Release artifact verified at: $ARTIFACT_PATH"
          ls -la ${{ env.RELEASE_DIR }}/
      
      - name: Create GitHub Release
        run: |
          echo "Creating GitHub release for version $VERSION"
          
          ARTIFACT_NAME="noconsolespam-$VERSION.jar"
          ARTIFACT_PATH="${{ env.RELEASE_DIR }}/$ARTIFACT_NAME"
          
          # Create release notes
          cat > release_notes.md << EOF
          ## NoConsoleSpam $VERSION Release
          
          ### Installation
          1. Install [Fabric Loader](https://fabricmc.net/use/) for Minecraft 1.20.1
          2. Download the JAR file
          3. Place it in your Minecraft mods folder
          
          For more details, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md)
          EOF
          
          # Create the release
          echo "Creating release with artifact: $ARTIFACT_PATH"
          gh release create "${{ github.ref_name }}" \
            --title "NoConsoleSpam $VERSION" \
            --notes-file release_notes.md \
            "$ARTIFACT_PATH"

  update-docs:
    name: Update Documentation
    if: startsWith(github.ref, 'refs/tags/v')
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Manual repository checkout
        run: |
          echo "Checking out repository for documentation update"
          # Generate a timestamp for unique directory
          TIMESTAMP=$(date +%s)
          DOCS_DIR="/tmp/docs_update_${TIMESTAMP}"
          
          mkdir -p "$DOCS_DIR"
          cd "$DOCS_DIR"
          
          git clone https://github.com/${{ github.repository }}.git .
          
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            git fetch --depth=1 origin +${{ github.ref }}:${{ github.ref }}
            git checkout ${{ github.ref }}
          fi
          
          # Store the directory path for later use
          echo "DOCS_DIR=$DOCS_DIR" >> $GITHUB_ENV
      
      - name: Extract version from tag
        run: |
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version from tag: $VERSION"
      
      - name: Update VERSIONS Documentation
        run: |
          cd ${{ env.DOCS_DIR }}
          echo "Updating VERSIONS.md for $VERSION"
          
          # Get current date
          DATE=$(date +"%Y-%m-%d")
          
          # Prepare new version entry
          NEW_ENTRY="## [$VERSION](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}) - $DATE\n\n- [Download JAR](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/noconsolespam-$VERSION.jar)\n- [View Changes](https://github.com/${{ github.repository }}/blob/main/CHANGES.md#$(echo $VERSION | sed 's/\\./-/g'))\n"
          
          # If VERSIONS.md doesn't exist, create it
          if [ ! -f VERSIONS.md ]; then
            echo -e "# NoConsoleSpam Versions\n\nThis document provides links to all released versions of NoConsoleSpam.\n" > VERSIONS.md
          fi
          
          # Add new entry after header
          awk -v new_entry="$NEW_ENTRY" 'NR==4{print new_entry}1' VERSIONS.md > VERSIONS.md.tmp && mv VERSIONS.md.tmp VERSIONS.md
          
          # Configure Git for commit
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Commit the changes
          git add VERSIONS.md
          git commit -m "Update VERSIONS.md for $VERSION" || echo "No changes to commit"
          
          # Push using token authentication
          git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git
          git push origin HEAD:${GITHUB_REF#refs/heads/}

  debug-info:
    name: Debug Information
    if: always()
    needs: [setup, build, test, prepare-artifacts]
    runs-on: ubuntu-latest
    steps:
      - name: Display debug information
        run: |
          echo "=== Debug Information ==="
          echo "Current directory: $(pwd)"
          
          echo "Shared directories:"
          for DIR in "${{ env.CACHE_DIR }}" "${{ env.ARTIFACT_DIR }}" "${{ env.RELEASE_DIR }}"; do
            if [ -d "$DIR" ]; then
              echo "Contents of $DIR:"
              ls -la "$DIR"
            else
              echo "Directory $DIR not found"
            fi
          done
          
          echo "Build artifacts:"
          if [ -d "${{ env.ARTIFACT_DIR }}/target" ]; then
            ls -la ${{ env.ARTIFACT_DIR }}/target/
          else
            echo "Build artifacts not found"
          fi
          
          echo "Release artifacts:"
          if [ -d "${{ env.RELEASE_DIR }}" ]; then
            ls -la ${{ env.RELEASE_DIR }}/
          else
            echo "Release directory not found"
          fi
          
          echo "Version information:"
          if [ -f "${{ env.CACHE_DIR }}/version.txt" ]; then
            echo "VERSION: $(cat ${{ env.CACHE_DIR }}/version.txt)"
          else
            echo "Version file not found"
          fi 