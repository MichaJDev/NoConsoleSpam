name: NoConsoleSpam Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Validate Maven project
        run: mvn -B validate

  build:
    name: Build and Test
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.save_artifact_name.outputs.artifact_name }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Build with Maven
        run: mvn -B clean package
      
      - name: Get version from pom.xml
        id: get_version
        run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT
        
      - name: Create artifact directory
        run: mkdir -p ./artifacts
        
      - name: Copy JAR to artifacts directory
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          ARTIFACT_NAME="noconsolespam-${VERSION}.jar"
          echo "Copying $ARTIFACT_NAME to artifacts directory"
          cp target/$ARTIFACT_NAME ./artifacts/
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        id: save_artifact_name
        
      - name: Create artifact archive
        run: |
          cd ./artifacts
          ARTIFACT_ARCHIVE="noconsolespam-artifact.tar.gz"
          tar -czf $ARTIFACT_ARCHIVE *.jar
          echo "Created archive: $ARTIFACT_ARCHIVE"
          cd ..
          
      - name: Cache artifacts for release job
        uses: actions/cache@v2
        with:
          path: ./artifacts
          key: ${{ runner.os }}-artifacts-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-artifacts-
            
      - name: Run tests
        run: mvn -B test
        
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Restore cached artifacts
        uses: actions/cache@v2
        with:
          path: ./artifacts
          key: ${{ runner.os }}-artifacts-${{ github.sha }}
        
      - name: Verify artifacts exist
        run: |
          if [ ! -d "./artifacts" ]; then
            echo "Error: Artifacts directory not found!"
            exit 1
          fi
          
          ARTIFACT_NAME="${{ needs.build.outputs.artifact_name }}"
          if [ ! -f "./artifacts/$ARTIFACT_NAME" ]; then
            echo "Error: Artifact file not found: $ARTIFACT_NAME"
            ls -la ./artifacts/
            exit 1
          fi
          
          echo "Artifact verified: ./artifacts/$ARTIFACT_NAME"
      
      - name: Create GitHub Release
        run: |
          VERSION=${{ needs.build.outputs.version }}
          ARTIFACT_PATH="./artifacts/noconsolespam-${VERSION}.jar"
          
          # Install GitHub CLI if not already installed
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          # Create release using GitHub CLI
          gh release create "v${VERSION}" \
            --title "NoConsoleSpam ${VERSION}" \
            --notes "## NoConsoleSpam ${VERSION} Release
            
            ### Installation
            1. Install [Fabric Loader](https://fabricmc.net/use/) for Minecraft 1.20.1
            2. Download the JAR file
            3. Place it in your Minecraft mods folder
            
            For more details, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md)" \
            "${ARTIFACT_PATH}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  update-versions:
    name: Update Versions Document
    needs: [build, release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Update VERSIONS.md
        run: |
          # Get current date
          DATE=$(date +"%Y-%m-%d")
          VERSION="${{ needs.build.outputs.version }}"
          
          # Prepare new version entry
          NEW_ENTRY="## [${VERSION}](https://github.com/${{ github.repository }}/releases/tag/v${VERSION}) - $DATE\n\n- [Download JAR](https://github.com/${{ github.repository }}/releases/download/v${VERSION}/noconsolespam-${VERSION}.jar)\n- [View Changes](https://github.com/${{ github.repository }}/blob/main/CHANGES.md#$(echo ${VERSION} | sed 's/\\./-/g'))\n"
          
          # If VERSIONS.md doesn't exist, create it
          if [ ! -f VERSIONS.md ]; then
            echo "# NoConsoleSpam Versions\n\nThis document provides links to all released versions of NoConsoleSpam.\n" > VERSIONS.md
          fi
          
          # Add new entry after header
          awk -v new_entry="$NEW_ENTRY" 'NR==4{print new_entry}1' VERSIONS.md > VERSIONS.md.tmp && mv VERSIONS.md.tmp VERSIONS.md
          
      - name: Commit and push VERSIONS.md update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add VERSIONS.md
          git commit -m "Update VERSIONS.md for ${{ needs.build.outputs.version }}" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 