name: NoConsoleSpam Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build-and-release:
    name: Build, Test and Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Manual repository checkout
        run: |
          echo "Performing manual checkout"
          git clone https://github.com/${{ github.repository }}.git .
          
          if [[ "${{ github.ref }}" == refs/pull/* ]]; then
            # For pull requests
            git fetch origin ${{ github.ref }} --depth=1
            git checkout FETCH_HEAD
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # For tags
            git fetch --depth=1 origin +${{ github.ref }}:${{ github.ref }}
            git checkout ${{ github.ref }}
          else
            # For branches
            git checkout ${{ github.ref_name }}
          fi
          
          echo "Repository checkout complete"
          ls -la
      
      - name: Setup JDK 17
        run: |
          echo "Setting up JDK 17"
          java -version || {
            echo "Java not found, installing OpenJDK 17"
            sudo apt-get update
            sudo apt-get install -y openjdk-17-jdk
          }
          
          export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))
          echo "JAVA_HOME=$JAVA_HOME"
          echo "PATH=$PATH:$JAVA_HOME/bin" >> $GITHUB_ENV
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          
          # Verify installation
          java -version
          javac -version
          
      - name: Build with Maven
        run: |
          echo "Building project with Maven"
          mvn -B clean package
          
          # Verify build success
          if [ ! -d "target" ]; then
            echo "Error: Build failed - target directory not found"
            exit 1
          fi
          
          echo "Build directory contents:"
          ls -la target/
          
      - name: Extract version from pom.xml
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"
          
      - name: Run tests
        run: |
          echo "Running tests"
          mvn -B test
      
      - name: Prepare release artifacts
        run: |
          echo "Preparing release artifacts"
          # Create artifacts directory
          mkdir -p artifacts
          
          # Find exact JAR file
          ARTIFACT_NAME="noconsolespam-$VERSION.jar"
          ARTIFACT_PATH="target/$ARTIFACT_NAME"
          
          if [ ! -f "$ARTIFACT_PATH" ]; then
            echo "ERROR: JAR file not found at expected path: $ARTIFACT_PATH"
            echo "Contents of target directory:"
            ls -la target/
            exit 1
          fi
          
          # Copy JAR to artifacts directory with verbose output
          echo "Copying $ARTIFACT_PATH to artifacts/$ARTIFACT_NAME"
          cp -v "$ARTIFACT_PATH" "artifacts/$ARTIFACT_NAME"
          
          # Save artifact name for use in later steps
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          
          echo "Artifacts directory contents:"
          ls -la artifacts/
          
          # Create artifact archive
          echo "Creating artifact archive"
          tar -czvf artifacts/noconsolespam-build.tar.gz artifacts/$ARTIFACT_NAME
      
      # Create release if it's a tag
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "Creating GitHub release for version $VERSION"
          
          # Install GitHub CLI
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
          
          # Authenticate with GitHub CLI
          echo "${{ github.token }}" | gh auth login --with-token
          
          # Verify artifact exists
          ARTIFACT_PATH="artifacts/$ARTIFACT_NAME"
          if [ ! -f "$ARTIFACT_PATH" ]; then
            echo "ERROR: JAR file not found at: $ARTIFACT_PATH"
            echo "Contents of artifacts directory:"
            ls -la artifacts/
            exit 1
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## NoConsoleSpam $VERSION Release
          
          ### Installation
          1. Install [Fabric Loader](https://fabricmc.net/use/) for Minecraft 1.20.1
          2. Download the JAR file
          3. Place it in your Minecraft mods folder
          
          For more details, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md)
          EOF
          
          # Create the release
          echo "Creating release with artifact: $ARTIFACT_PATH"
          gh release create "v$VERSION" \
            --title "NoConsoleSpam $VERSION" \
            --notes-file release_notes.md \
            "$ARTIFACT_PATH"
      
      # Update VERSIONS.md if it's a tag
      - name: Update VERSIONS Documentation
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "Updating VERSIONS.md for $VERSION"
          
          # Get current date
          DATE=$(date +"%Y-%m-%d")
          
          # Prepare new version entry
          NEW_ENTRY="## [$VERSION](https://github.com/${{ github.repository }}/releases/tag/v$VERSION) - $DATE\n\n- [Download JAR](https://github.com/${{ github.repository }}/releases/download/v$VERSION/noconsolespam-$VERSION.jar)\n- [View Changes](https://github.com/${{ github.repository }}/blob/main/CHANGES.md#$(echo $VERSION | sed 's/\\./-/g'))\n"
          
          # If VERSIONS.md doesn't exist, create it
          if [ ! -f VERSIONS.md ]; then
            echo "# NoConsoleSpam Versions\n\nThis document provides links to all released versions of NoConsoleSpam.\n" > VERSIONS.md
          fi
          
          # Add new entry after header
          awk -v new_entry="$NEW_ENTRY" 'NR==4{print new_entry}1' VERSIONS.md > VERSIONS.md.tmp && mv VERSIONS.md.tmp VERSIONS.md
          
          # Configure Git for commit
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Commit the changes
          git add VERSIONS.md
          git commit -m "Update VERSIONS.md for $VERSION" || echo "No changes to commit"
          
          # Push using token authentication
          git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git
          git push origin HEAD:${GITHUB_REF#refs/heads/}
          
      # For debugging - save information about workspace contents
      - name: Debug information
        if: always()
        run: |
          echo "=== Debug Information ==="
          echo "Current directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          
          echo "Target directory contents:"
          ls -la target/ || echo "No target directory found"
          
          echo "Artifacts directory contents:"
          ls -la artifacts/ || echo "No artifacts directory found"
          
          echo "Environment variables:"
          echo "VERSION: $VERSION"
          echo "ARTIFACT_NAME: $ARTIFACT_NAME 